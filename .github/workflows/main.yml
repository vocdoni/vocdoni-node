---
name: Main

on: [push, pull_request]

jobs:
  job_go_checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Print github env vars
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}
          echo github.ref_name: ${{ github.ref_name }}
          echo github.head_ref: ${{ github.head_ref }}
          echo github.base_ref: ${{ github.base_ref }}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.5'
          cache: true
      - name: Tidy go cache
        run: go mod tidy
      - name: Run gofmt
        # Run gofmt first, as it's quick and issues are common.
        run: diff -u <(echo -n) <(gofmt -s -d .)
      - name: Run go vet
        run: go vet ./...
      - name: Download staticcheck
        # staticcheck provides a github action, use it (https://staticcheck.io/docs/running-staticcheck/ci/github-actions/)
        # or use golangci-lint (github action) with staticcheck as enabled linter
        run: |
          curl -L https://github.com/dominikh/go-tools/releases/download/v0.3.3/staticcheck_linux_amd64.tar.gz | tar -xzf -
      - name: Run staticcheck
        run: |
          ./staticcheck/staticcheck ./... 2> staticcheck/stderr
      - name: Check staticcheck stderr (this step isn't needed because we are using actions/setup-go@v3 on GitHub hosted runner)
        run: |
          if cat staticcheck/stderr | grep "matched no packages" ; then
            echo "staticcheck step did nothing, due to https://github.com/vocdoni/vocdoni-node/issues/444"
            echo "Please re-run job."
            # seize the opportunity to fix the underlying problem: a permissions error in ~/.cache
            epoch=$(date +%s)
            # if any file is reported by find, grep returns true and the mv is done
            if [ -d ~/.cache ] && find ~/.cache -not -user `id --user` -print0 | grep -qz . ; then
              echo "~/.cache had broken permissions, moving it away... (cache will be rebuilt with usage)"
              mv -v ~/.cache ~/.cache-broken-by-root-$epoch
            fi
            exit 2
          fi

  job_go_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.5'
          cache: true
      - name: Tidy go cache
        run: go mod tidy
      - name: Run Go test
        if: github.ref != 'refs/heads/master' && github.ref != 'refs/heads/stage' && !startsWith(github.ref, 'refs/heads/release') && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/apiv2'
        run: go test ./...
      - name: Run Go test race
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/stage' || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/apiv2'
        run: |
          # check that log lines contains no invalid chars (evidence of format mismatch)
          export LOG_PANIC_ON_INVALIDCHARS=true
          # -race can easily make the crypto stuff 10x slower
          go test -vet=off -timeout=15m -race ./...

  job_compose_test:
    runs-on: [self-hosted, ci2-1]
    if: |
      github.ref == 'refs/heads/master' || github.ref == 'refs/heads/stage' || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/apiv2'
      || (startsWith(github.ref, 'refs/pull/') && endsWith(github.ref, '/merge') )
      || github.ref == 'refs/heads/main'
    steps:
      - name: Set non-root owner to dockerfiles/testsuite folder
        run: |
          dir="${{ github.workspace }}/dockerfiles/testsuite/"
          if [ -d "$dir" ]; then
            ls -la $dir
            sudo chown -R $USER:sudo $dir
            echo "Checking again permissions/owner"
            ls -la $dir
          else
            echo "Seems the $dir folder doesn't exist"
          fi
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Run compose script
        run: |
          export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1
          export DOCKER_CLI_EXPERIMENTAL=enabled
          export COMPOSE_PROJECT_NAME=${RANDOM}${RANDOM}_testsuite
          export TESTSUITE_BUILD_TAG=${CI_COMMIT_SHA::10}
          export COMPOSE_HOST_PATH=${PWD}/dockerfiles/testsuite
          export COMPOSE_DVOTE_PORT_MAPPING="9090" # Will use a random available port mapping
          export LOG_PANIC_ON_INVALIDCHARS=true
          cd dockerfiles/testsuite
          docker-compose build
          ./start_test.sh

  job_docker_release:
    runs-on: ubuntu-latest
    needs: [job_go_test, job_compose_test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/stage' || startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/apiv2'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Get short branch name
        id: var
        shell: bash
        # Grab the short branch name, convert slashes to dashes
        run: |
          echo "branch_name=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' )" >> $GITHUB_OUTPUT
      - name: Push image to Docker Hub and ghcr.io
        uses: docker/build-push-action@v3
        with:
          context: .
          # platforms: linux/amd64,linux/arm64
          push: true     # true to upload image to registry
          tags: |
            vocdoni/go-dvote:latest, vocdoni/go-dvote:${{ steps.var.outputs.branch_name }},
            ghcr.io/vocdoni/go-dvote:latest, ghcr.io/vocdoni/go-dvote:${{ steps.var.outputs.branch_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push image to Docker Hub and ghcr.io (race enabled)
        uses: docker/build-push-action@v3
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
        with:
          context: .
          push: true     # true to upload image to registry
          build-args: |
            BUILDARGS=-race
          tags: |
            vocdoni/go-dvote:latest-race, vocdoni/go-dvote:${{ steps.var.outputs.branch_name }}-race,
            ghcr.io/vocdoni/go-dvote:latest-race, ghcr.io/vocdoni/go-dvote:${{ steps.var.outputs.branch_name }}-race
          cache-from: type=gha
          cache-to: type=gha,mode=max

  job_go_build_for_mac:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go environment
        uses: actions/setup-go@v3
        with:
          go-version: '1.19.5'
          cache: true
      - name: Tidy go cache
        run: go mod tidy
      - name: Run go build for Mac
        run: |
          # Some of our devs are on Mac. Ensure it builds.
          # It's surprisingly hard with some deps like bazil.org/fuse.
          GOOS=darwin go build ./...
