// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package indexerdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.computeProcessVoteCountStmt, err = db.PrepareContext(ctx, computeProcessVoteCount); err != nil {
		return nil, fmt.Errorf("error preparing query ComputeProcessVoteCount: %w", err)
	}
	if q.countAccountsStmt, err = db.PrepareContext(ctx, countAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query CountAccounts: %w", err)
	}
	if q.countBlocksStmt, err = db.PrepareContext(ctx, countBlocks); err != nil {
		return nil, fmt.Errorf("error preparing query CountBlocks: %w", err)
	}
	if q.countTokenTransfersByAccountStmt, err = db.PrepareContext(ctx, countTokenTransfersByAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CountTokenTransfersByAccount: %w", err)
	}
	if q.countTransactionsStmt, err = db.PrepareContext(ctx, countTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query CountTransactions: %w", err)
	}
	if q.countTransactionsByHeightStmt, err = db.PrepareContext(ctx, countTransactionsByHeight); err != nil {
		return nil, fmt.Errorf("error preparing query CountTransactionsByHeight: %w", err)
	}
	if q.countVotesStmt, err = db.PrepareContext(ctx, countVotes); err != nil {
		return nil, fmt.Errorf("error preparing query CountVotes: %w", err)
	}
	if q.createAccountStmt, err = db.PrepareContext(ctx, createAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAccount: %w", err)
	}
	if q.createBlockStmt, err = db.PrepareContext(ctx, createBlock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlock: %w", err)
	}
	if q.createProcessStmt, err = db.PrepareContext(ctx, createProcess); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProcess: %w", err)
	}
	if q.createTokenFeeStmt, err = db.PrepareContext(ctx, createTokenFee); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTokenFee: %w", err)
	}
	if q.createTokenTransferStmt, err = db.PrepareContext(ctx, createTokenTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTokenTransfer: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createVoteStmt, err = db.PrepareContext(ctx, createVote); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVote: %w", err)
	}
	if q.getBlockByHashStmt, err = db.PrepareContext(ctx, getBlockByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlockByHash: %w", err)
	}
	if q.getBlockByHeightStmt, err = db.PrepareContext(ctx, getBlockByHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlockByHeight: %w", err)
	}
	if q.getEntityCountStmt, err = db.PrepareContext(ctx, getEntityCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntityCount: %w", err)
	}
	if q.getProcessStmt, err = db.PrepareContext(ctx, getProcess); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcess: %w", err)
	}
	if q.getProcessCountStmt, err = db.PrepareContext(ctx, getProcessCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcessCount: %w", err)
	}
	if q.getProcessIDsByFinalResultsStmt, err = db.PrepareContext(ctx, getProcessIDsByFinalResults); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcessIDsByFinalResults: %w", err)
	}
	if q.getProcessStatusStmt, err = db.PrepareContext(ctx, getProcessStatus); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcessStatus: %w", err)
	}
	if q.getTokenTransferStmt, err = db.PrepareContext(ctx, getTokenTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query GetTokenTransfer: %w", err)
	}
	if q.getTransactionByHashStmt, err = db.PrepareContext(ctx, getTransactionByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByHash: %w", err)
	}
	if q.getTransactionByHeightAndIndexStmt, err = db.PrepareContext(ctx, getTransactionByHeightAndIndex); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionByHeightAndIndex: %w", err)
	}
	if q.getVoteStmt, err = db.PrepareContext(ctx, getVote); err != nil {
		return nil, fmt.Errorf("error preparing query GetVote: %w", err)
	}
	if q.lastBlockHeightStmt, err = db.PrepareContext(ctx, lastBlockHeight); err != nil {
		return nil, fmt.Errorf("error preparing query LastBlockHeight: %w", err)
	}
	if q.searchAccountsStmt, err = db.PrepareContext(ctx, searchAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query SearchAccounts: %w", err)
	}
	if q.searchBlocksStmt, err = db.PrepareContext(ctx, searchBlocks); err != nil {
		return nil, fmt.Errorf("error preparing query SearchBlocks: %w", err)
	}
	if q.searchEntitiesStmt, err = db.PrepareContext(ctx, searchEntities); err != nil {
		return nil, fmt.Errorf("error preparing query SearchEntities: %w", err)
	}
	if q.searchProcessesStmt, err = db.PrepareContext(ctx, searchProcesses); err != nil {
		return nil, fmt.Errorf("error preparing query SearchProcesses: %w", err)
	}
	if q.searchTokenFeesStmt, err = db.PrepareContext(ctx, searchTokenFees); err != nil {
		return nil, fmt.Errorf("error preparing query SearchTokenFees: %w", err)
	}
	if q.searchTokenTransfersStmt, err = db.PrepareContext(ctx, searchTokenTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query SearchTokenTransfers: %w", err)
	}
	if q.searchTransactionsStmt, err = db.PrepareContext(ctx, searchTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query SearchTransactions: %w", err)
	}
	if q.searchVotesStmt, err = db.PrepareContext(ctx, searchVotes); err != nil {
		return nil, fmt.Errorf("error preparing query SearchVotes: %w", err)
	}
	if q.setProcessResultsCancelledStmt, err = db.PrepareContext(ctx, setProcessResultsCancelled); err != nil {
		return nil, fmt.Errorf("error preparing query SetProcessResultsCancelled: %w", err)
	}
	if q.setProcessResultsReadyStmt, err = db.PrepareContext(ctx, setProcessResultsReady); err != nil {
		return nil, fmt.Errorf("error preparing query SetProcessResultsReady: %w", err)
	}
	if q.updateProcessEndDateStmt, err = db.PrepareContext(ctx, updateProcessEndDate); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProcessEndDate: %w", err)
	}
	if q.updateProcessFromStateStmt, err = db.PrepareContext(ctx, updateProcessFromState); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProcessFromState: %w", err)
	}
	if q.updateProcessResultByIDStmt, err = db.PrepareContext(ctx, updateProcessResultByID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProcessResultByID: %w", err)
	}
	if q.updateProcessResultsStmt, err = db.PrepareContext(ctx, updateProcessResults); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProcessResults: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.computeProcessVoteCountStmt != nil {
		if cerr := q.computeProcessVoteCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing computeProcessVoteCountStmt: %w", cerr)
		}
	}
	if q.countAccountsStmt != nil {
		if cerr := q.countAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAccountsStmt: %w", cerr)
		}
	}
	if q.countBlocksStmt != nil {
		if cerr := q.countBlocksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBlocksStmt: %w", cerr)
		}
	}
	if q.countTokenTransfersByAccountStmt != nil {
		if cerr := q.countTokenTransfersByAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTokenTransfersByAccountStmt: %w", cerr)
		}
	}
	if q.countTransactionsStmt != nil {
		if cerr := q.countTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTransactionsStmt: %w", cerr)
		}
	}
	if q.countTransactionsByHeightStmt != nil {
		if cerr := q.countTransactionsByHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTransactionsByHeightStmt: %w", cerr)
		}
	}
	if q.countVotesStmt != nil {
		if cerr := q.countVotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countVotesStmt: %w", cerr)
		}
	}
	if q.createAccountStmt != nil {
		if cerr := q.createAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAccountStmt: %w", cerr)
		}
	}
	if q.createBlockStmt != nil {
		if cerr := q.createBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlockStmt: %w", cerr)
		}
	}
	if q.createProcessStmt != nil {
		if cerr := q.createProcessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProcessStmt: %w", cerr)
		}
	}
	if q.createTokenFeeStmt != nil {
		if cerr := q.createTokenFeeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTokenFeeStmt: %w", cerr)
		}
	}
	if q.createTokenTransferStmt != nil {
		if cerr := q.createTokenTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTokenTransferStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createVoteStmt != nil {
		if cerr := q.createVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVoteStmt: %w", cerr)
		}
	}
	if q.getBlockByHashStmt != nil {
		if cerr := q.getBlockByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlockByHashStmt: %w", cerr)
		}
	}
	if q.getBlockByHeightStmt != nil {
		if cerr := q.getBlockByHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlockByHeightStmt: %w", cerr)
		}
	}
	if q.getEntityCountStmt != nil {
		if cerr := q.getEntityCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntityCountStmt: %w", cerr)
		}
	}
	if q.getProcessStmt != nil {
		if cerr := q.getProcessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessStmt: %w", cerr)
		}
	}
	if q.getProcessCountStmt != nil {
		if cerr := q.getProcessCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessCountStmt: %w", cerr)
		}
	}
	if q.getProcessIDsByFinalResultsStmt != nil {
		if cerr := q.getProcessIDsByFinalResultsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessIDsByFinalResultsStmt: %w", cerr)
		}
	}
	if q.getProcessStatusStmt != nil {
		if cerr := q.getProcessStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessStatusStmt: %w", cerr)
		}
	}
	if q.getTokenTransferStmt != nil {
		if cerr := q.getTokenTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTokenTransferStmt: %w", cerr)
		}
	}
	if q.getTransactionByHashStmt != nil {
		if cerr := q.getTransactionByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByHashStmt: %w", cerr)
		}
	}
	if q.getTransactionByHeightAndIndexStmt != nil {
		if cerr := q.getTransactionByHeightAndIndexStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByHeightAndIndexStmt: %w", cerr)
		}
	}
	if q.getVoteStmt != nil {
		if cerr := q.getVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVoteStmt: %w", cerr)
		}
	}
	if q.lastBlockHeightStmt != nil {
		if cerr := q.lastBlockHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lastBlockHeightStmt: %w", cerr)
		}
	}
	if q.searchAccountsStmt != nil {
		if cerr := q.searchAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchAccountsStmt: %w", cerr)
		}
	}
	if q.searchBlocksStmt != nil {
		if cerr := q.searchBlocksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchBlocksStmt: %w", cerr)
		}
	}
	if q.searchEntitiesStmt != nil {
		if cerr := q.searchEntitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchEntitiesStmt: %w", cerr)
		}
	}
	if q.searchProcessesStmt != nil {
		if cerr := q.searchProcessesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchProcessesStmt: %w", cerr)
		}
	}
	if q.searchTokenFeesStmt != nil {
		if cerr := q.searchTokenFeesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchTokenFeesStmt: %w", cerr)
		}
	}
	if q.searchTokenTransfersStmt != nil {
		if cerr := q.searchTokenTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchTokenTransfersStmt: %w", cerr)
		}
	}
	if q.searchTransactionsStmt != nil {
		if cerr := q.searchTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchTransactionsStmt: %w", cerr)
		}
	}
	if q.searchVotesStmt != nil {
		if cerr := q.searchVotesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchVotesStmt: %w", cerr)
		}
	}
	if q.setProcessResultsCancelledStmt != nil {
		if cerr := q.setProcessResultsCancelledStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProcessResultsCancelledStmt: %w", cerr)
		}
	}
	if q.setProcessResultsReadyStmt != nil {
		if cerr := q.setProcessResultsReadyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProcessResultsReadyStmt: %w", cerr)
		}
	}
	if q.updateProcessEndDateStmt != nil {
		if cerr := q.updateProcessEndDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProcessEndDateStmt: %w", cerr)
		}
	}
	if q.updateProcessFromStateStmt != nil {
		if cerr := q.updateProcessFromStateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProcessFromStateStmt: %w", cerr)
		}
	}
	if q.updateProcessResultByIDStmt != nil {
		if cerr := q.updateProcessResultByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProcessResultByIDStmt: %w", cerr)
		}
	}
	if q.updateProcessResultsStmt != nil {
		if cerr := q.updateProcessResultsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProcessResultsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                 DBTX
	tx                                 *sql.Tx
	computeProcessVoteCountStmt        *sql.Stmt
	countAccountsStmt                  *sql.Stmt
	countBlocksStmt                    *sql.Stmt
	countTokenTransfersByAccountStmt   *sql.Stmt
	countTransactionsStmt              *sql.Stmt
	countTransactionsByHeightStmt      *sql.Stmt
	countVotesStmt                     *sql.Stmt
	createAccountStmt                  *sql.Stmt
	createBlockStmt                    *sql.Stmt
	createProcessStmt                  *sql.Stmt
	createTokenFeeStmt                 *sql.Stmt
	createTokenTransferStmt            *sql.Stmt
	createTransactionStmt              *sql.Stmt
	createVoteStmt                     *sql.Stmt
	getBlockByHashStmt                 *sql.Stmt
	getBlockByHeightStmt               *sql.Stmt
	getEntityCountStmt                 *sql.Stmt
	getProcessStmt                     *sql.Stmt
	getProcessCountStmt                *sql.Stmt
	getProcessIDsByFinalResultsStmt    *sql.Stmt
	getProcessStatusStmt               *sql.Stmt
	getTokenTransferStmt               *sql.Stmt
	getTransactionByHashStmt           *sql.Stmt
	getTransactionByHeightAndIndexStmt *sql.Stmt
	getVoteStmt                        *sql.Stmt
	lastBlockHeightStmt                *sql.Stmt
	searchAccountsStmt                 *sql.Stmt
	searchBlocksStmt                   *sql.Stmt
	searchEntitiesStmt                 *sql.Stmt
	searchProcessesStmt                *sql.Stmt
	searchTokenFeesStmt                *sql.Stmt
	searchTokenTransfersStmt           *sql.Stmt
	searchTransactionsStmt             *sql.Stmt
	searchVotesStmt                    *sql.Stmt
	setProcessResultsCancelledStmt     *sql.Stmt
	setProcessResultsReadyStmt         *sql.Stmt
	updateProcessEndDateStmt           *sql.Stmt
	updateProcessFromStateStmt         *sql.Stmt
	updateProcessResultByIDStmt        *sql.Stmt
	updateProcessResultsStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		computeProcessVoteCountStmt:        q.computeProcessVoteCountStmt,
		countAccountsStmt:                  q.countAccountsStmt,
		countBlocksStmt:                    q.countBlocksStmt,
		countTokenTransfersByAccountStmt:   q.countTokenTransfersByAccountStmt,
		countTransactionsStmt:              q.countTransactionsStmt,
		countTransactionsByHeightStmt:      q.countTransactionsByHeightStmt,
		countVotesStmt:                     q.countVotesStmt,
		createAccountStmt:                  q.createAccountStmt,
		createBlockStmt:                    q.createBlockStmt,
		createProcessStmt:                  q.createProcessStmt,
		createTokenFeeStmt:                 q.createTokenFeeStmt,
		createTokenTransferStmt:            q.createTokenTransferStmt,
		createTransactionStmt:              q.createTransactionStmt,
		createVoteStmt:                     q.createVoteStmt,
		getBlockByHashStmt:                 q.getBlockByHashStmt,
		getBlockByHeightStmt:               q.getBlockByHeightStmt,
		getEntityCountStmt:                 q.getEntityCountStmt,
		getProcessStmt:                     q.getProcessStmt,
		getProcessCountStmt:                q.getProcessCountStmt,
		getProcessIDsByFinalResultsStmt:    q.getProcessIDsByFinalResultsStmt,
		getProcessStatusStmt:               q.getProcessStatusStmt,
		getTokenTransferStmt:               q.getTokenTransferStmt,
		getTransactionByHashStmt:           q.getTransactionByHashStmt,
		getTransactionByHeightAndIndexStmt: q.getTransactionByHeightAndIndexStmt,
		getVoteStmt:                        q.getVoteStmt,
		lastBlockHeightStmt:                q.lastBlockHeightStmt,
		searchAccountsStmt:                 q.searchAccountsStmt,
		searchBlocksStmt:                   q.searchBlocksStmt,
		searchEntitiesStmt:                 q.searchEntitiesStmt,
		searchProcessesStmt:                q.searchProcessesStmt,
		searchTokenFeesStmt:                q.searchTokenFeesStmt,
		searchTokenTransfersStmt:           q.searchTokenTransfersStmt,
		searchTransactionsStmt:             q.searchTransactionsStmt,
		searchVotesStmt:                    q.searchVotesStmt,
		setProcessResultsCancelledStmt:     q.setProcessResultsCancelledStmt,
		setProcessResultsReadyStmt:         q.setProcessResultsReadyStmt,
		updateProcessEndDateStmt:           q.updateProcessEndDateStmt,
		updateProcessFromStateStmt:         q.updateProcessFromStateStmt,
		updateProcessResultByIDStmt:        q.updateProcessResultByIDStmt,
		updateProcessResultsStmt:           q.updateProcessResultsStmt,
	}
}
