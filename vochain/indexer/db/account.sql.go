// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package indexerdb

import (
	"context"
	"database/sql"

	"go.vocdoni.io/dvote/types"
)

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*)
FROM accounts
WHERE (
  (
  ?1 = ''
  OR (LENGTH(?1) = 40 AND LOWER(HEX(account)) = LOWER(?1))
  OR (LENGTH(?1) < 40 AND INSTR(LOWER(HEX(account)), LOWER(?1)) > 0)
  -- TODO: consider keeping an account_hex column for faster searches
  )
)
`

func (q *Queries) CountAccounts(ctx context.Context, accountIDSubstr interface{}) (int64, error) {
	row := q.queryRow(ctx, q.countAccountsStmt, countAccounts, accountIDSubstr)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTotalAccounts = `-- name: CountTotalAccounts :one
SELECT COUNT(*)
FROM accounts
`

func (q *Queries) CountTotalAccounts(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTotalAccountsStmt, countTotalAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :execresult
REPLACE INTO accounts (
    account, balance, nonce
) VALUES (?, ?, ?)
`

type CreateAccountParams struct {
	Account types.AccountID
	Balance int64
	Nonce   int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.exec(ctx, q.createAccountStmt, createAccount, arg.Account, arg.Balance, arg.Nonce)
}

const searchAccounts = `-- name: SearchAccounts :many
SELECT account, balance, nonce
FROM accounts
WHERE (
  (
  ?1 = ''
  OR (LENGTH(?1) = 40 AND LOWER(HEX(account)) = LOWER(?1))
  OR (LENGTH(?1) < 40 AND INSTR(LOWER(HEX(account)), LOWER(?1)) > 0)
  -- TODO: consider keeping an account_hex column for faster searches
  )
)
ORDER BY balance DESC
LIMIT ?3
OFFSET ?2
`

type SearchAccountsParams struct {
	AccountIDSubstr interface{}
	Offset          int64
	Limit           int64
}

func (q *Queries) SearchAccounts(ctx context.Context, arg SearchAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.searchAccountsStmt, searchAccounts, arg.AccountIDSubstr, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(&i.Account, &i.Balance, &i.Nonce); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
