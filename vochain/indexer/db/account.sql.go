// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: account.sql

package indexerdb

import (
	"context"
	"database/sql"

	"go.vocdoni.io/dvote/types"
)

const countAccounts = `-- name: CountAccounts :one
SELECT COUNT(*) FROM accounts
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countAccountsStmt, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :execresult
REPLACE INTO accounts (
    account, balance, nonce
) VALUES (?, ?, ?)
`

type CreateAccountParams struct {
	Account types.AccountID
	Balance int64
	Nonce   int64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.exec(ctx, q.createAccountStmt, createAccount, arg.Account, arg.Balance, arg.Nonce)
}

const searchAccounts = `-- name: SearchAccounts :many
WITH results AS (
  SELECT account, balance, nonce
  FROM accounts
  WHERE (
    (
    ?3 = ''
    OR (LENGTH(?3) = 40 AND LOWER(HEX(account)) = LOWER(?3))
    OR (LENGTH(?3) < 40 AND INSTR(LOWER(HEX(account)), LOWER(?3)) > 0)
    -- TODO: consider keeping an account_hex column for faster searches
    )
  )
)
SELECT account, balance, nonce, COUNT(*) OVER() AS total_count
FROM results
ORDER BY balance DESC
LIMIT ?2
OFFSET ?1
`

type SearchAccountsParams struct {
	Offset          int64
	Limit           int64
	AccountIDSubstr interface{}
}

type SearchAccountsRow struct {
	Account    []byte
	Balance    int64
	Nonce      int64
	TotalCount int64
}

func (q *Queries) SearchAccounts(ctx context.Context, arg SearchAccountsParams) ([]SearchAccountsRow, error) {
	rows, err := q.query(ctx, q.searchAccountsStmt, searchAccounts, arg.Offset, arg.Limit, arg.AccountIDSubstr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAccountsRow
	for rows.Next() {
		var i SearchAccountsRow
		if err := rows.Scan(
			&i.Account,
			&i.Balance,
			&i.Nonce,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
