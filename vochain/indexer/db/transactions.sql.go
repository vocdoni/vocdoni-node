// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: transactions.sql

package indexerdb

import (
	"context"
	"database/sql"

	"go.vocdoni.io/dvote/types"
)

const countTransactions = `-- name: CountTransactions :one
SELECT COUNT(*) FROM transactions
`

func (q *Queries) CountTransactions(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTransactionsStmt, countTransactions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTransaction = `-- name: CreateTransaction :execresult
INSERT INTO transactions (
	hash, block_height, block_index, type
) VALUES (
	?, ?, ?, ?
)
`

type CreateTransactionParams struct {
	Hash        types.Hash
	BlockHeight int64
	BlockIndex  int64
	Type        string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (sql.Result, error) {
	return q.exec(ctx, q.createTransactionStmt, createTransaction,
		arg.Hash,
		arg.BlockHeight,
		arg.BlockIndex,
		arg.Type,
	)
}

const getTransactionByHash = `-- name: GetTransactionByHash :one
SELECT hash, block_height, block_index, type FROM transactions
WHERE hash = ?
LIMIT 1
`

func (q *Queries) GetTransactionByHash(ctx context.Context, hash types.Hash) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByHashStmt, getTransactionByHash, hash)
	var i Transaction
	err := row.Scan(
		&i.Hash,
		&i.BlockHeight,
		&i.BlockIndex,
		&i.Type,
	)
	return i, err
}

const getTxReferenceByBlockHeightAndBlockIndex = `-- name: GetTxReferenceByBlockHeightAndBlockIndex :one
SELECT hash, block_height, block_index, type FROM transactions
WHERE block_height = ? AND block_index = ?
LIMIT 1
`

type GetTxReferenceByBlockHeightAndBlockIndexParams struct {
	BlockHeight int64
	BlockIndex  int64
}

func (q *Queries) GetTxReferenceByBlockHeightAndBlockIndex(ctx context.Context, arg GetTxReferenceByBlockHeightAndBlockIndexParams) (Transaction, error) {
	row := q.queryRow(ctx, q.getTxReferenceByBlockHeightAndBlockIndexStmt, getTxReferenceByBlockHeightAndBlockIndex, arg.BlockHeight, arg.BlockIndex)
	var i Transaction
	err := row.Scan(
		&i.Hash,
		&i.BlockHeight,
		&i.BlockIndex,
		&i.Type,
	)
	return i, err
}

const searchTransactions = `-- name: SearchTransactions :many
WITH results AS (
  SELECT hash, block_height, block_index, type
  FROM transactions
  WHERE (
    (?3 = 0 OR block_height = ?3)
    AND (?4 = '' OR LOWER(type) = LOWER(?4))
  )
)
SELECT hash, block_height, block_index, type, COUNT(*) OVER() AS total_count
FROM results
ORDER BY block_height DESC, block_index DESC
LIMIT ?2
OFFSET ?1
`

type SearchTransactionsParams struct {
	Offset      int64
	Limit       int64
	BlockHeight interface{}
	TxType      interface{}
}

type SearchTransactionsRow struct {
	Hash        []byte
	BlockHeight int64
	BlockIndex  int64
	Type        string
	TotalCount  int64
}

func (q *Queries) SearchTransactions(ctx context.Context, arg SearchTransactionsParams) ([]SearchTransactionsRow, error) {
	rows, err := q.query(ctx, q.searchTransactionsStmt, searchTransactions,
		arg.Offset,
		arg.Limit,
		arg.BlockHeight,
		arg.TxType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchTransactionsRow
	for rows.Next() {
		var i SearchTransactionsRow
		if err := rows.Scan(
			&i.Hash,
			&i.BlockHeight,
			&i.BlockIndex,
			&i.Type,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
