// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token_fees.sql

package indexerdb

import (
	"context"
	"database/sql"
	"time"
)

const countTokenFees = `-- name: CountTokenFees :one
SELECT COUNT(*)
FROM token_fees
WHERE (
  (?1 = '' OR LOWER(HEX(from_account)) = LOWER(?1))
  AND (?2 = '' OR LOWER(tx_type) = LOWER(?2))
  AND (?3 = '' OR LOWER(reference) = LOWER(?3))
)
`

type CountTokenFeesParams struct {
	FromAccount interface{}
	TxType      interface{}
	Reference   interface{}
}

func (q *Queries) CountTokenFees(ctx context.Context, arg CountTokenFeesParams) (int64, error) {
	row := q.queryRow(ctx, q.countTokenFeesStmt, countTokenFees, arg.FromAccount, arg.TxType, arg.Reference)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTokenFee = `-- name: CreateTokenFee :execresult
INSERT INTO token_fees (
	from_account, block_height, reference,
	cost, tx_type, spend_time
) VALUES (
	?, ?, ?,
	?, ?, ?
)
`

type CreateTokenFeeParams struct {
	FromAccount []byte
	BlockHeight int64
	Reference   string
	Cost        int64
	TxType      string
	SpendTime   time.Time
}

func (q *Queries) CreateTokenFee(ctx context.Context, arg CreateTokenFeeParams) (sql.Result, error) {
	return q.exec(ctx, q.createTokenFeeStmt, createTokenFee,
		arg.FromAccount,
		arg.BlockHeight,
		arg.Reference,
		arg.Cost,
		arg.TxType,
		arg.SpendTime,
	)
}

const searchTokenFees = `-- name: SearchTokenFees :many
SELECT id, block_height, from_account, reference, cost, tx_type, spend_time
FROM token_fees
WHERE (
  (?1 = '' OR LOWER(HEX(from_account)) = LOWER(?1))
  AND (?2 = '' OR LOWER(tx_type) = LOWER(?2))
  AND (?3 = '' OR LOWER(reference) = LOWER(?3))
)
ORDER BY spend_time DESC
LIMIT ?5
OFFSET ?4
`

type SearchTokenFeesParams struct {
	FromAccount interface{}
	TxType      interface{}
	Reference   interface{}
	Offset      int64
	Limit       int64
}

func (q *Queries) SearchTokenFees(ctx context.Context, arg SearchTokenFeesParams) ([]TokenFee, error) {
	rows, err := q.query(ctx, q.searchTokenFeesStmt, searchTokenFees,
		arg.FromAccount,
		arg.TxType,
		arg.Reference,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TokenFee
	for rows.Next() {
		var i TokenFee
		if err := rows.Scan(
			&i.ID,
			&i.BlockHeight,
			&i.FromAccount,
			&i.Reference,
			&i.Cost,
			&i.TxType,
			&i.SpendTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
