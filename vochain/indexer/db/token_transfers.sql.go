// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: token_transfers.sql

package indexerdb

import (
	"context"
	"database/sql"
	"time"

	"go.vocdoni.io/dvote/types"
)

const countTokenTransfersByAccount = `-- name: CountTokenTransfersByAccount :one
SELECT COUNT(*) FROM token_transfers
WHERE to_account = ?1 OR
	  from_account = ?1
`

func (q *Queries) CountTokenTransfersByAccount(ctx context.Context, account types.AccountID) (int64, error) {
	row := q.queryRow(ctx, q.countTokenTransfersByAccountStmt, countTokenTransfersByAccount, account)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTokenTransfer = `-- name: CreateTokenTransfer :execresult
INSERT INTO token_transfers (
	tx_hash, block_height, from_account,
	to_account, amount, transfer_time
) VALUES (
	?, ?, ?,
	?, ?, ?
)
`

type CreateTokenTransferParams struct {
	TxHash       types.Hash
	BlockHeight  int64
	FromAccount  types.AccountID
	ToAccount    types.AccountID
	Amount       int64
	TransferTime time.Time
}

func (q *Queries) CreateTokenTransfer(ctx context.Context, arg CreateTokenTransferParams) (sql.Result, error) {
	return q.exec(ctx, q.createTokenTransferStmt, createTokenTransfer,
		arg.TxHash,
		arg.BlockHeight,
		arg.FromAccount,
		arg.ToAccount,
		arg.Amount,
		arg.TransferTime,
	)
}

const getTokenTransfer = `-- name: GetTokenTransfer :one
SELECT tx_hash, block_height, from_account, to_account, amount, transfer_time FROM token_transfers
WHERE tx_hash = ?
LIMIT 1
`

func (q *Queries) GetTokenTransfer(ctx context.Context, txHash types.Hash) (TokenTransfer, error) {
	row := q.queryRow(ctx, q.getTokenTransferStmt, getTokenTransfer, txHash)
	var i TokenTransfer
	err := row.Scan(
		&i.TxHash,
		&i.BlockHeight,
		&i.FromAccount,
		&i.ToAccount,
		&i.Amount,
		&i.TransferTime,
	)
	return i, err
}

const searchTokenTransfers = `-- name: SearchTokenTransfers :many
WITH results AS (
  SELECT tx_hash, block_height, from_account, to_account, amount, transfer_time
  FROM token_transfers
  WHERE (
    (?3 = '' OR (
		LOWER(HEX(from_account)) = LOWER(?3)
		OR LOWER(HEX(to_account)) = LOWER(?3)
	))
    AND (?4 = '' OR LOWER(HEX(from_account)) = LOWER(?4))
    AND (?5 = '' OR LOWER(HEX(to_account)) = LOWER(?5))
  )
)
SELECT tx_hash, block_height, from_account, to_account, amount, transfer_time, COUNT(*) OVER() AS total_count
FROM results
ORDER BY transfer_time DESC
LIMIT ?2
OFFSET ?1
`

type SearchTokenTransfersParams struct {
	Offset          int64
	Limit           int64
	FromOrToAccount interface{}
	FromAccount     interface{}
	ToAccount       interface{}
}

type SearchTokenTransfersRow struct {
	TxHash       []byte
	BlockHeight  int64
	FromAccount  []byte
	ToAccount    []byte
	Amount       int64
	TransferTime time.Time
	TotalCount   int64
}

func (q *Queries) SearchTokenTransfers(ctx context.Context, arg SearchTokenTransfersParams) ([]SearchTokenTransfersRow, error) {
	rows, err := q.query(ctx, q.searchTokenTransfersStmt, searchTokenTransfers,
		arg.Offset,
		arg.Limit,
		arg.FromOrToAccount,
		arg.FromAccount,
		arg.ToAccount,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchTokenTransfersRow
	for rows.Next() {
		var i SearchTokenTransfersRow
		if err := rows.Scan(
			&i.TxHash,
			&i.BlockHeight,
			&i.FromAccount,
			&i.ToAccount,
			&i.Amount,
			&i.TransferTime,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
