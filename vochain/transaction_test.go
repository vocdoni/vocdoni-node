package vochain

import (
	"crypto/sha256"
	"math/big"
	"testing"

	qt "github.com/frankban/quicktest"
	"github.com/vocdoni/arbo"
	snarkParsers "github.com/vocdoni/go-snark/parsers"
	models "go.vocdoni.io/proto/build/go/models"
)

func TestVoteEnvelopeCheckCaseZkSNARK(t *testing.T) {
	app := TestBaseApplication(t)

	vkJSON := `
	{
	 "protocol": "groth16",
	 "curve": "bn128",
	 "nPublic": 6,
	 "vk_alpha_1": [
	  "21570897791642380277752434740024110102792886837244881550666450700549104298089",
	  "5386504239427038008620982595001082292396635625972942560215007308353697245476",
	  "1"
	 ],
	 "vk_beta_2": [
	  [
	   "18737076824318754329156481033775425261179613334943392346939134459114486321677",
	   "7249446268722290001439932097355616342179458598031968579936911262966685384212"
	  ],
	  [
	   "15003354984691321514060074329668030122102099914936584907249503084430873116565",
	   "18928145845076206421277923294025633453290663761655982097316694801700285915821"
	  ],
	  [
	   "1",
	   "0"
	  ]
	 ],
	 "vk_gamma_2": [
	  [
	   "10857046999023057135944570762232829481370756359578518086990519993285655852781",
	   "11559732032986387107991004021392285783925812861821192530917403151452391805634"
	  ],
	  [
	   "8495653923123431417604973247489272438418190587263600148770280649306958101930",
	   "4082367875863433681332203403145435568316851327593401208105741076214120093531"
	  ],
	  [
	   "1",
	   "0"
	  ]
	 ],
	 "vk_delta_2": [
	  [
	   "15154979846154103831116912306544513811686454432631428502006315022307482455545",
	   "2240709034597445484595675727311283572116769660766214913899270145221788761201"
	  ],
	  [
	   "16843399307849092053373734360320812632687141782043896234351766722473609682798",
	   "828774465539160013617380706490757194003534206627730406779066052398245481146"
	  ],
	  [
	   "1",
	   "0"
	  ]
	 ],
	 "vk_alphabeta_12": [
	  [
	   [
	    "10536513522896767761592382667394199820005241480447942358727837635290330201878",
	    "15854964351466606727031265157093063518156317702161501380569486239022693841573"
	   ],
	   [
	    "15343975585627947826129615462754834260991968951461228539768419439762898509683",
	    "16301217572386844072104390844517165996834098572679852614718065189454297122280"
	   ],
	   [
	    "17703662239961631842155309533519974247426685294591609525128570328799541574604",
	    "2100246261973671367905865424015140695617689892634175200682065452051284261958"
	   ]
	  ],
	  [
	   [
	    "21699681914882497394791438803632524015032291359903795263528691631138722178035",
	    "21656889939795433102501132807558611931393589855436449412615060537199788679580"
	   ],
	   [
	    "18370360107537898405129514946016152470038168161274548931540040237539158642242",
	    "2160936097339591463639520112211746396022493367670307334879855285400410205062"
	   ],
	   [
	    "5386298926917693103729385173661785956313023218959731688345204757515425151751",
	    "19120821620387180726893633687777366831066243656488568589080834630258694398514"
	   ]
	  ]
	 ],
	 "IC": [
	  [
	   "414955297486555438206868481740896901799821216973715902202582991379718675554",
	   "4009748153711328563905171757328869969794427627953818506975484482431920476811",
	   "1"
	  ],
	  [
	   "16098693990547100608466436126165733304210003784283737354282214568200179078946",
	   "3299917483115056834094989321650473029511506870556381418289322191991828937936",
	   "1"
	  ],
	  [
	   "15567391122753078700334206807978401075376863351905436257030652250584904597622",
	   "13615800563608509259963058637853044943689994364661065523150393343713440774942",
	   "1"
	  ],
	  [
	   "15075453205581914268057117632538568083928053856917553424293435082436622876581",
	   "19533417247471738602573644968222913600055962512077375633026744710038204854203",
	   "1"
	  ],
	  [
	   "6024204156763312832692934321917742062677058675435442515512414235557014518657",
	   "17155296274861428701584581778202300150235098621042252722935370516146117692791",
	   "1"
	  ],
	  [
	   "18137613636460014378515600300120280115848065711156873347178234531951151728676",
	   "12597456132799922150804054801552716268423050188493167580964146704808282603764",
	   "1"
	  ],
	  [
	   "9006284143908297552369974811353505187056697713534511171726602278740932568606",
	   "16227305612305203824700320428148694243858037705936411283400303932689281246458",
	   "1"
	  ]
	 ]
	}
	`
	vk0, err := snarkParsers.ParseVk([]byte(vkJSON))
	qt.Assert(t, err, qt.IsNil)
	app.ZkVKs = append(app.ZkVKs, vk0)

	processId := sha256.Sum256(big.NewInt(10).Bytes()) // processId is a byte-array of 32 bytes
	entityId := []byte("entityid-test")
	censusRootBI, ok := new(big.Int).SetString("13256983273841966279055596043431919350426357891097196583481278449962353221936", 10)
	qt.Assert(t, ok, qt.IsTrue)
	process := &models.Process{
		ProcessId: processId[:],
		EntityId:  entityId,
		EnvelopeType: &models.EnvelopeType{
			Anonymous: true,
		},
		Mode:       &models.ProcessMode{},
		Status:     models.ProcessStatus_READY,
		CensusRoot: make([]byte, 32), // emtpy hash
		StartBlock: 1,
		BlockCount: 3,
	}
	err = app.State.AddProcess(process)
	qt.Assert(t, err, qt.IsNil)
	process, err = app.State.Process(processId[:], false)
	qt.Assert(t, err, qt.IsNil)
	process.RollingCensusRoot = arbo.BigIntToBytes(32, censusRootBI)
	err = app.State.updateProcess(process, processId[:])
	qt.Assert(t, err, qt.IsNil)

	// proof data generated from js (snarkjs)
	protoProof := models.ProofZkSNARK{
		CircuitParametersIndex: 0,
		A: []string{
			"3665555060351095883708547048502764224526204020470708139250707607784197522791",
			"2930529552404596900239149248923088295380661750403129035397657472551197323173",
			"1",
		},
		B: []string{
			"20636235162289278445603025255126231272335669959886044047517167763419558357726",
			"12389369127342656824696296216895404694704969305015998809779980647902485839993",
			"16238455986180781601226563145601340561934814303791475357669901685390231562265",
			"15785056355138598355783370588807784507474112639816708330300915626742600245832",
			"1",
			"0",
		},
		C: []string{
			"2826094787272415727727078023504547941096280378603556717631874126978052357873",
			"10971670069192505909163110232130604279972038238575277963470838562849902719515",
			"1",
		},
	}

	nullifierBI, ok := new(big.Int).SetString("9464482416872469446849476841635888299250846240473623349595304484954843565595", 10)
	qt.Assert(t, ok, qt.IsTrue)
	nullifier := arbo.BigIntToBytes(32, nullifierBI)

	voteValue := big.NewInt(1).Bytes()
	vtx := &models.VoteEnvelope{
		ProcessId:   processId[:],
		VotePackage: voteValue,
		Nullifier:   nullifier,
		Proof: &models.Proof{
			Payload: &models.Proof_ZkSnark{
				ZkSnark: &protoProof,
			},
		},
	}
	signature := []byte{}
	txBytes := []byte{}
	txID := [32]byte{}
	commit := false

	_, _, err = app.VoteEnvelopeCheck(vtx, txBytes, signature, txID, commit)
	qt.Assert(t, err, qt.IsNil)
}
